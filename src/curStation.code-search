# Query: curStation
# ContextLines: 1

43 results - 4 files

lib\00_settings\00_settings.h:
  24  String ntp = "de.pool.ntp.org";  // URL of the NTP server for time synchronization
  25: extern uint8_t curStation;           // Index of the currently selected station in the stationlist
  26  uint8_t curGain = 200;           // Current volume (gain)

src\main.cpp:
  112    
  113:   uint8_t curStation = 0;curStation = 0;  // Standard value for actual station
  114    // Set the current station to the saved value, if available
  115:   if (pref.isKey("station")) curStation = pref.getUShort("station");
  116    // Check whether the current station is within the valid range
  117:   if (curStation >= STATIONS) curStation = 0;
  118  
  119:   actStation = curStation;  // Set the active station to the current station
  120  
  121    // Debug output of current station, volume, SSID and NTP server
  122:   Serial.printf("station %i, gain %i, ssid %s, ntp %s\n", curStation, curGain, ssid.c_str(), ntp.c_str());
  123  

src\tft_display.cpp:
  117  // This function checks which of the favorite buttons on the screen was touched
  118: // and sets the current station (`curStation`) to the corresponding favorite.
  119  // The function uses the x and y coordinates of the touch to determine the range of the favorite buttons

  140      // Check the x-coordinate for the specific favorite buttons
  141:     if ((xpos < 64) && (favoriteIndexes[0] > -1)) { curStation = favoriteIndexes[0]; }
  142:     if ((xpos >= 64) && (xpos < 128) && (favoriteIndexes[1] > -1)) { curStation = favoriteIndexes[1]; }
  143:     if ((xpos >= 128) && (xpos < 192) && (favoriteIndexes[2] > -1)) { curStation = favoriteIndexes[2]; }
  144:     if ((xpos >= 192) && (xpos < 256) && (favoriteIndexes[3] > -1)) { curStation = favoriteIndexes[3]; }
  145:     if ((xpos >= 256) && (favoriteIndexes[4] > -1)) { curStation = favoriteIndexes[4]; }
  146    } else {  // bottom row of favorite buttons
  147      // Check the x-coordinate for the specific favorite buttons
  148:     if ((xpos < 64) && (favoriteIndexes[5] > -1)) { curStation = favoriteIndexes[5]; }
  149:     if ((xpos >= 64) && (xpos < 128) && (favoriteIndexes[6] > -1)) { curStation = favoriteIndexes[6]; }
  150:     if ((xpos >= 128) && (xpos < 192) && (favoriteIndexes[7] > -1)) { curStation = favoriteIndexes[7]; }
  151:     if ((xpos >= 192) && (xpos < 256) && (favoriteIndexes[8] > -1)) { curStation = favoriteIndexes[8]; }
  152:     if ((xpos >= 256) && (favoriteIndexes[9] > -1)) { curStation = favoriteIndexes[9]; }
  153    }

  441      do {
  442:       if (curStation == 0) {
  443          // If we are at the beginning of the list, go to the end of the list
  444:         curStation = STATIONS - 1;
  445        } else {
  446          // Otherwise, go to the previous station
  447:         curStation--;
  448        }
  449:     } while (!stationlist[curStation].enabled);  // Repeat until an activated station is found
  450    }

  455      do {
  456:       if (curStation == (STATIONS - 1)) {
  457          // When we get to the end of the list, go to the top of the list
  458:         curStation = 0;
  459        } else {
  460          // Otherwise, go to the next station
  461:         curStation++;
  462        }
  463:     } while (!stationlist[curStation].enabled);  // Repeat until an activated station is found
  464    }

  533  void changeStation() {
  534:   actStation = curStation;  // Sets the current station (curStation) as the active station (actStation)
  535  
  536    // Saves the new value of the active station
  537:   pref.putUShort("station", curStation);
  538  

  949    // Encode the station name (e.g. for umlauts) and save it in the buffer
  950:   encodeUnicode(stationlist[curStation].name, txt);
  951  

  966    // Set current station as selected station
  967:   curStation = actStation;
  968  

src\webserver.cpp:
  449      // Verringert die aktuelle Station um eins
  450:     curStation -= 1;
  451      // Wenn die aktuelle Station kleiner als 0 wird, setze sie auf die letzte Station
  452:     if (curStation < 0) {
  453:       curStation = STATIONS - 1;
  454      }

  459        // Optional: Reset to the last station (even if it is disabled)
  460:       curStation = STATIONS - 1;
  461        // Debug output that no active station was found

  466      }
  467:   } while (!stationlist[curStation].enabled);
  468    // Changes the station and displays the new station

  470    // Debug output of the current station
  471:   Serial.println(curStation); 
  472    // Answers with "OK"

  482      // Increases the current station by one
  483:     curStation += 1; 
  484      // If the current station exceeds the maximum value, set it to the first station
  485:     if (curStation >= STATIONS) {
  486:       curStation = 0;
  487      }

  492        // Optional: Setze auf die erste Station zur√ºck (auch wenn sie deaktiviert ist)
  493:       curStation = 0;
  494        // Debug output that no active station was found

  499      }
  500:   } while (!stationlist[curStation].enabled);
  501    // Changes the station and displays the new station

  503    // Debug output of the current station
  504:   Serial.println(curStation);
  505    // Answers with "OK"
