# Query: alarmday
# Flags: CaseSensitive WordMatch
# ContextLines: 1

30 results - 4 files

lib\00_settings\00_settings.h:
  38  extern uint16_t alarmtime;      // Next relevant alarm time
  39: extern uint8_t alarmday;        // Day of the week for the next relevant alarm or 8 means alarm disabled
  40  char title[64];              // Character array to store the metadata message

src\main.cpp:
   18  // Calculates the date and time for the next expected alarm
   19: // Sets `alarmtime` to the time of day and `alarmday` to the day of the week for the alarm
   20  // or to 8 if there is no alarm

   28      wd = weekday;                     // Set wd to the current day of the week
   29:     uint8_t alarmday = 8; alarmday = 8;                     // Set alarmday to 8, which means there is no ala
   30      alarmtime = MINUTES_PER_DAY + 1;  // Set alarmtime to a value greater than the maximum possible value for minutes per day

   36        alarmtime = alarm1;  // Set Alarm time to alarm 1
   37:       alarmday = wd;       // Set Alarm day to actual day of week
   38      }

   42        alarmtime = alarm2;  // Set Alarm time to alarm 2
   43:       alarmday = wd;       // Set Alarm day to actual day of week
   44      }

   46      // If no alarm is found, continue searching for the next alarm in the coming week
   47:     if (alarmday == 8) {  // If alarmday is 8, no alarm is detected
   48        do {

   56            alarmtime = alarm1;  // Set Time to Alarm 1
   57:           alarmday = wd;       // Set alarmday to actual Weekday
   58          }

   62            alarmtime = alarm2;  // Set Time to Alarm 2
   63:           alarmday = wd;       // Set alarmday to actual Weekday
   64          }
   65  
   66:       } while ((alarmday == 8) && (wd != weekday));  // Repeat until a valid alarm is found or a week has passed
   67     } 
   68:     Serial.printf("Next alarm %i on %i\n", alarmtime, alarmday);  // Output the next alarm time and day of the week
   69    }

  112    alarmtime = 0;  // Start value for the next Alarm time
  113:   alarmday = 8;   // Start value for the next Alarm day (8 means, Alarm is not active)
  114    

  267      // If an alarm is activated, check the day and time
  268:     if ((alarmday < 8) && getLocalTime(&ti)) {
  269        // When the alarm day and time are reached, turn on the radio and calculate the values ​​for the next expected alarm
  270:       if ((alarmday == weekday) && ((minutes == alarmtime) || (minutes == (alarmtime + 1)))) {
  271          // Test Beeper#####################

src\tft_display.cpp:
    81    uint8_t symbol;
    82:   if (alarmday < 8) {            // When Alarm is active 
    83      color_temp = COLOR_KNOEPFE;  // Set default color for active Alarm

   499  
   500: //Turns the alarm on or off based on the current value of 'alarmday'.
   501: // If 'alarmday' is greater than 7 (meaning the alarm is currently disabled),
   502  // the next available alarm is found and the alarm status is set to 'on'.
   503: // If 'alarmday' is 7 or less (which means the alarm is enabled),
   504: // the alarm is disabled by setting 'alarmday' to 8.
   505  // The alarm status is updated accordingly in the settings.

   507  void toggleAlarm() {
   508:   if (alarmday > 7) {
   509:     // If the alarm was off (alarmday > 7), find the next alarm and activate it
   510      findNextAlarm();                // Search for the next available alarm

   513      // Wenn der Alarm aktiviert ist, deaktiviere ihn
   514:     alarmday = 8;                    // Set alarmday to 8, which is interpreted as 'alarm off'
   515      pref.putBool("alarmon", false);  // Set the alarm status to 'off' in the settings

  1275    if (clockmode) {
  1276:     if (alarmday < 8) {                                          // When the alarm clock is activated
  1277        color_alarm = COLOR_ALARM_SYMBOL;                          // Alarm icon color

  1280        m = alarmtime % 60;                                        // Calculate minutes
  1281:       sprintf(txt, "%s %02i:%02i", days_short[alarmday], h, m);  // Format text for alarm time
  1282      } else {                                                     // When the alarm is turned off

src\webserver.cpp:
  529    // Alarm status
  530:   if (alarmday < 8) {  // Alarm is active
  531      h = alarmtime / 60;
  532      m = alarmtime % 60;
  533:     sprintf(txt, "%s %02i:%02i", days_short[alarmday], h, m);
  534      jsonDoc["alarm"] = "1";
